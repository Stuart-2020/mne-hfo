
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/detect_hfos.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_detect_hfos.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_detect_hfos.py:


====================================
01. Detect HFOs in Simulated Dataset
====================================

.. currentmodule:: mne_hfo

MNE-HFO currently depends on the data structures defined by ``MNE-Python``.
Namely the :py:class:`mne.io.Raw` object.

In this example, we use MNE-HFO to simulate raw data and detect HFOs.
Specifically, we will follow these steps:

1. Create some simulated data and artificially simulate a few HFOs

2. Run a few ``mne_hfo.base.Detector`` instances to detect HFOs

3. Format the detected HFOs as a :class:`pandas.DataFrame`

4. Write to disk and read it in again.

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default


    # Authors: Adam Li <adam2392@gmail.com>
    #








.. GENERATED FROM PYTHON SOURCE LINES 28-29

We are importing everything we need for this example:

.. GENERATED FROM PYTHON SOURCE LINES 29-38

.. code-block:: default


    import numpy as np
    from mne import create_info
    from mne.io import RawArray

    from mne_hfo import (RMSDetector, compute_chs_hfo_rates,
                         events_to_annotations)
    from mne_hfo.simulate import simulate_hfo








.. GENERATED FROM PYTHON SOURCE LINES 39-48

Simulate the data
-----------------

First, we need some data to work with. We will use a fake dataset that we
simulate.

In this example, we will simulate sinusoidal data that has an artificial
HFO added at two points with 9 cycles each.


.. GENERATED FROM PYTHON SOURCE LINES 48-85

.. code-block:: default


    # simulate the testing dataset
    freqs = [2.5, 6.0, 10.0, 16.0, 32.5, 67.5, 165.0,
             250.0, 425.0, 500.0, 800.0, 1500.0]

    # sampling frequency
    sfreq = 2000

    # number of seconds to simulate
    n = sfreq * 10
    data = np.zeros(n)

    # generate some sinusoidal data at specified frequencies
    x = np.arange(n)
    for freq in freqs:
        # freq_amp = basic_amp / freq
        y = np.sin(2 * np.pi * freq * x / sfreq)
        data += y

    # We have dummy data now inject 2 HFOs
    freq = 250
    numcycles = 9
    sim = simulate_hfo(sfreq, freq, numcycles)[0]
    ev_start = sfreq
    data[ev_start: ev_start + len(sim)] += sim * 10

    sim = simulate_hfo(sfreq, freq, numcycles)[0]
    ev_start = 7 * sfreq
    data[ev_start: ev_start + len(sim)] += sim * 10

    # convert the data into mne-python
    # note: the channel names are made up and the channel types are just
    # set to 'seeg' for the sake of the example
    ch_names = ['A1']
    info = create_info(sfreq=sfreq, ch_names=ch_names, ch_types='seeg')
    raw = RawArray(data=data[np.newaxis, :], info=info)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Creating RawArray with float64 data, n_channels=1, n_times=20000
        Range : 0 ... 19999 =      0.000 ...     9.999 secs
    Ready.




.. GENERATED FROM PYTHON SOURCE LINES 86-87

Let's plot the data and see what it looks like

.. GENERATED FROM PYTHON SOURCE LINES 87-89

.. code-block:: default

    raw.plot()




.. image:: /auto_examples/images/sphx_glr_detect_hfos_001.png
    :alt: detect hfos
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <MNEBrowseFigure size 640x480 with 4 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 90-98

Detect HFOs
-----------
All detectors inherit from the base class ``mne_hfo.base.Detector``,
which inherits from the :class:`sklearn.base.BaseEstimator` class.
To run any estimator, one instantiates it along with the hyper-parameters,
and then calls the ``fit`` function. Afterwards, detected HFOs are available
in the various data structures. The recommended usage is the DataFrame, which
is accessible via the ``mne_hfo.base.Detector.hfo_df`` property.

.. GENERATED FROM PYTHON SOURCE LINES 98-113

.. code-block:: default


    kwargs = {
        'threshold': 3,  # threshold for "significance"
        'win_size': 100,  # window size in samples
        'overlap': 0.25  # overlap in percentage relative to the window size
    }
    detector = RMSDetector(**kwargs)

    # run detector
    detector.fit(X=raw)

    # get the event dataframe
    event_df = detector.hfo_event_df
    print(event_df.head())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ?it/s]    100%|##########| 1/1 [00:00<00:00, 91.85it/s]
       onset  ...  trial_type
    0    1.0  ...      hfo_A1
    1    7.0  ...      hfo_A1

    [2 rows x 4 columns]




.. GENERATED FROM PYTHON SOURCE LINES 114-121

Convert HFO events to annotations
---------------------------------
Detectors output HFO events detected as a DataFrame fashioned after the
``*_events.tsv`` files in BIDS-iEEG. Instead, HFO events are indeed
Derivatives of the Raw data, that are estimated/detected using mne-hfo.
The correct way to store them is in terms of an ``*_annotations.tsv``,
according to the BIDS-Derivatives specification.

.. GENERATED FROM PYTHON SOURCE LINES 121-126

.. code-block:: default


    # convert event df -> annotation df
    annot_df = events_to_annotations(event_df)
    print(annot_df.head())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

       onset  ...   sample
    0    1.0  ...   2000.0
    1    7.0  ...  14000.0

    [2 rows x 5 columns]




.. GENERATED FROM PYTHON SOURCE LINES 127-128

compute HFO rate as HFOs per second

.. GENERATED FROM PYTHON SOURCE LINES 128-130

.. code-block:: default

    ch_rates = compute_chs_hfo_rates(annot_df=annot_df, rate='s')
    print(ch_rates)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Beginning timestamp: 2021-02-25 20:55:59.278071+00:00
    Got end timestamp of: 2021-02-25 20:56:06.278071+00:00
    Found HFO rate per s for A1 as 0.2857142857142857
    defaultdict(<class 'list'>, {'A1': 0.2857142857142857})





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.321 seconds)


.. _sphx_glr_download_auto_examples_detect_hfos.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: detect_hfos.py <detect_hfos.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: detect_hfos.ipynb <detect_hfos.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
